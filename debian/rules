#!/usr/bin/make -f
#
# Bootstrap a minimal fbc setup based on precompiled compiler sources
#
# 1. Build rtlib/gfxlib2 (it's written in C, no bootstrapping needed)
# 2. Assemble/compile the precompiled src/compiler/*.{asm|c} into .o
# 3. Create the new bin/fbc from those .o, linked against that rtlib
#
# This assumes that the precompiled .asm/.c is compatible with the rtlib!
# Ideally the .asm/.c should have been generated by this same FB version.
#

%:
	dh $@

ifeq ($(DEB_HOST_ARCH),i386)
  fbarch := x86
endif
ifeq ($(DEB_HOST_ARCH),amd64)
  fbarch := x86_64
endif

# For x86, we use precompiled .asm
ifeq ($(fbarch),x86)
objs := $(patsubst %.asm,%.o,$(wildcard fbc-bootstrap/linux-x86/*.asm))
$(objs): %.o: %.asm
	as --strip-local-absolute $< -o $@
endif

# For x86_64, we use precompiled .c
ifeq ($(fbarch),x86_64)
objs := $(patsubst %.c,%.o,$(wildcard fbc-bootstrap/linux-x86_64/*.c))
$(objs): %.o: %.c
	gcc -c -nostdinc \
		-Wall -Wno-unused-label -Wno-unused-function -Wno-unused-variable \
		-Wno-unused-but-set-variable -Wno-main \
		-fno-strict-aliasing -frounding-math \
		$< -o $@
endif

bin/fbc: $(objs)
	mkdir -p bin
	gcc -o bin/fbc lib/freebasic/linux-$(fbarch)/fbrt0.o fbc-bootstrap/linux-$(fbarch)/*.o \
		lib/freebasic/linux-$(fbarch)/libfb.a -lncurses -lm -pthread

.PHONY: rtlib
rtlib:
	make rtlib gfxlib2

override_dh_auto_build: rtlib bin/fbc

override_dh_auto_install:
	mkdir -p debian/freebasic-bootstrap/usr
	make install prefix=debian/freebasic-bootstrap/usr
